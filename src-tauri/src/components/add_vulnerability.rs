use rusqlite::{params, Connection, Result};
use std::path::PathBuf;
use tauri::api::path::resource_dir;
use tauri::command;
use tauri::State;
use crate::AppState;

fn get_db_path(db_name: &str, state: &State<'_, AppState>) -> Result<PathBuf, String> {
    let resource_dir =
        resource_dir(&state.package_info, &state.env).ok_or("Failed to get resource directory")?;
    Ok(resource_dir.join("resources").join(db_name))
}

#[command]
pub fn add_vulnerability(
    vuln_name: String,
    vuln_description: String,
    fix_suggestion: String,
    state: State<'_, AppState>, // 通过 State 访问全局状态
) -> Result<(), String> {
    println!(
        "收到漏洞信息: {}, {}, {}",
        vuln_name, vuln_description, fix_suggestion
    );

    // 获取数据库路径
    let db_path = get_db_path("vulnerabilities.db", &state)?;

    // 创建或连接到 SQLite 数据库
    let conn = Connection::open(db_path).map_err(|e| format!("无法连接到数据库: {}", e))?;

    // 创建漏洞表（如果尚未创建）
    conn.execute(
        "CREATE TABLE IF NOT EXISTS vulnerabilities (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            vuln_name TEXT NOT NULL,
            vuln_description TEXT NOT NULL,
            fix_suggestion TEXT NOT NULL
        )",
        [],
    )
        .map_err(|e| format!("创建表失败: {}", e))?;

    // 将漏洞信息插入数据库
    conn.execute(
        "INSERT INTO vulnerabilities (vuln_name, vuln_description, fix_suggestion) VALUES (?1, ?2, ?3)",
        params![vuln_name, vuln_description, fix_suggestion],
    )
        .map_err(|e| format!("插入数据失败: {}", e))?;

    Ok(())
}
