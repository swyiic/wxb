use rusqlite::{params, Connection, Result};
use std::path::PathBuf;
use tauri::api::path::resource_dir;
use tauri::command;
use tauri::{State};
use crate::AppState;

fn get_db_path(db_name: &str, state: &State<'_, AppState>) -> Result<PathBuf, String> {
    let resource_dir =
        resource_dir(&state.package_info, &state.env).ok_or("Failed to get resource directory")?;
    Ok(resource_dir.join("resources").join(db_name))
}

#[command]
pub fn delete_vulnerability(id: i32, state: State<'_, AppState>) -> Result<(), String> {
    let db_path = get_db_path("vulnerabilities.db", &state)?;

    let conn = Connection::open(db_path).map_err(|e| format!("无法连接到数据库: {}", e))?;

    conn.execute("DELETE FROM vulnerabilities WHERE id = ?", params![id])
        .map_err(|e| format!("删除漏洞失败: {}", e))?;

    Ok(())
}
