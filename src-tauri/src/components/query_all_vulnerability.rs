use rusqlite::{Connection, Result};
use serde::Serialize;
use std::path::PathBuf;
use tauri::api::path::resource_dir;
use tauri::command;
use tauri::{State};
use crate::AppState;

#[derive(Debug, Serialize)]
pub struct Vulnerability {
    pub id: i32,
    pub vuln_name: String,
    pub vuln_description: String,
    pub fix_suggestion: String,
}

fn get_db_path(db_name: &str, state: &State<'_, AppState>) -> Result<PathBuf, String> {
    let resource_dir =
        resource_dir(&state.package_info, &state.env).ok_or("Failed to get resource directory")?;
    Ok(resource_dir.join("resources").join(db_name))
}

#[command]
pub fn query_all_vulnerability(state: State<'_, AppState>) -> Result<Vec<Vulnerability>, String> {
    // 获取数据库路径
    let db_path = get_db_path("vulnerabilities.db", &state)?;

    // 打开数据库连接
    let conn = Connection::open(db_path).map_err(|e| format!("无法连接到数据库: {}", e))?;

    // 准备查询语句
    let mut stmt = conn
        .prepare("SELECT id, vuln_name, vuln_description, fix_suggestion FROM vulnerabilities")
        .map_err(|e| e.to_string())?;

    // 执行查询并映射结果
    let vulnerabilities = stmt
        .query_map([], |row| {
            Ok(Vulnerability {
                id: row.get(0)?,
                vuln_name: row.get(1)?,
                vuln_description: row.get(2)?,
                fix_suggestion: row.get(3)?,
            })
        })
        .map_err(|e| e.to_string())?
        .collect::<Result<Vec<Vulnerability>, _>>()
        .map_err(|e| e.to_string())?;
    Ok(vulnerabilities)
}

#[command]
pub fn search_vulnerability_by_name(
    query: String,
    state: State<'_, AppState>,
) -> Result<Vec<Vulnerability>, String> {
    // 获取数据库路径
    let db_path = get_db_path("vulnerabilities.db", &state)?;

    // 打开数据库连接
    let conn = Connection::open(db_path).map_err(|e| format!("无法连接到数据库: {}", e))?;

    // 准备查询语句
    let mut stmt = conn
        .prepare(
            "SELECT id, vuln_name, vuln_description, fix_suggestion
         FROM vulnerabilities WHERE vuln_name LIKE ?1",
        )
        .map_err(|e| e.to_string())?;

    // 执行查询并映射结果
    let vulnerabilities = stmt
        .query_map([format!("%{}%", query)], |row| {
            Ok(Vulnerability {
                id: row.get(0)?,
                vuln_name: row.get(1)?,
                vuln_description: row.get(2)?,
                fix_suggestion: row.get(3)?,
            })
        })
        .map_err(|e| e.to_string())?
        .collect::<Result<Vec<Vulnerability>, _>>()
        .map_err(|e| e.to_string())?;

    Ok(vulnerabilities)
}